
"""
This module needs to be compiled using colcon for ROS2 and is not directly run by FEAGI

Todo: Need to implement an automated method to deploy and compile this method.
1. mkdir -p ~/ros2_ws/src     # Create a ros2 workspace
2. cd ~/ros2_ws/src
3. ros2 pkg create --build-type ament_python py_topic    # Create a ros2 package
4. cp /src/ipu/source/ros/ros_laser_scan.py ~/ros2_ws/src/py_topic/py_topic/
5. edit ~/ros2_ws/src/py_topic/package.xml and add the following 3 lines after the license declaration line
  <buildtool_depend>ament_python</buildtool_depend>
  <exec_depend>rclpy</exec_depend>
  <exec_depend>geometry_msgs</exec_depend>

6. Edit ~/ros2_ws/src/py_topic/setup.py entry point as follows:
    'console_scripts': ['py_laser_scan = py_topic.ros_laser_scan:main']

7. cd ~/ros2_ws
8. colcon build
9. ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py  #in one terminal run Turtlebot3
10.   # In another terminal, source your ros
11. ros2 run py_topic ros_laser_scan


Note: This module is a modified version of the code from OSRF

# Copyright 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
import rclpy
import zmq

from rclpy.node import Node
from sensor_msgs.msg import LaserScan #to call laserscan so it can convert the data or provide the data
from rclpy.qos import QoSProfile
from rclpy.qos import qos_profile_sensor_data #this is required to have a full data

print("Starting FEAGI-ROS Laser Scan Interface...")

# todo: export socket address to config file
socket_address = 'tcp://0.0.0.0:2000'

context = zmq.Context()
socket = context.socket(zmq.PUB)
print("Binding to socket", socket_address)

# todo: Figure a way to externalize the binding port. feagi_configuration.ini captures it on FEAGI side.
socket.bind(socket_address)
print("Laser scanner message queue has been activated...")


class MinimalSubscriber(Node):

    def __init__(self):
        super().__init__('minimal_subscriber')
        self.subscription = self.create_subscription(
            LaserScan,
            'scan',
            self.listener_callback,
            qos_profile=qos_profile_sensor_data)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        try:
            ranges = msg.ranges
            socket.send_pyobj(ranges)
            # self.get_logger().info("angle_max: {}".format(ranges)) #put .format(msg) to display the data
        except AttributeError:
            socket.send_pyobj(msg)
            self.get_logger().info("angle_max: {}".format(ranges)) #put .format(msg) to display the data

def main(args=None):
    rclpy.init(args=args)

    minimal_subscriber = MinimalSubscriber()

    rclpy.spin(minimal_subscriber)


    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

"""
Message Sample:
ros_1    | [INFO] [1625199304.512361700] [minimal_subscriber]: angle_max: array('f', [inf, inf, inf, inf, inf, inf, inf, 3.078615188598633, 3.0256943702697754, 3.0138087272644043, 2.0507216453552246, 1.9851146936416626, 1.9470616579055786, 1.9407635927200317, 1.9537014961242676, 1.9393752813339233, 1.949794054031372, 1.9805753231048584, inf, inf, inf, 0.9721885919570923, 0.9610393047332764, 0.9410232901573181, 0.9450387954711914, 0.9180629849433899, 0.9092382788658142, 0.9197663068771362, 0.9023125767707825, 0.9050961136817932, 0.9319580793380737, 0.9164179563522339, 0.9308430552482605, 0.9408872127532959, 0.9372798204421997, 0.9510921835899353, 1.0081905126571655, 2.4389281272888184, 2.418811321258545, 2.449841022491455, 2.476029634475708, 2.494767665863037, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.758474349975586, 1.7332125902175903, 1.7026480436325073, 1.685631513595581, 1.701706886291504, 1.7098056077957153, 1.7250003814697266, 1.7413023710250854, 1.8012428283691406, 3.3568928241729736, 3.333390951156616, 3.3098878860473633, 3.2886769771575928, 3.2450387477874756, 3.2473435401916504, 3.218806743621826, 3.2050883769989014, 3.0758345127105713, 2.867964267730713, 2.6816887855529785, 2.5801451206207275, 2.5515904426574707, 2.5548577308654785, 2.540877103805542, 2.543396472930908, 2.5247983932495117, 2.5291624069213867, 2.524259328842163, 2.512922763824463, 2.426276206970215, 2.350797176361084, 2.2483320236206055, 2.1578423976898193, 2.0931830406188965, 2.045400857925415, 1.9885444641113281, 1.9249420166015625, 1.8784589767456055, 1.8514219522476196, 1.7823114395141602, 1.733019232749939, 1.6917136907577515, 1.6599479913711548, 1.6294184923171997, 1.5951566696166992, 1.5608367919921875, 1.52998948097229, 1.499906301498413, 1.4754406213760376, 1.4558672904968262, 1.417547345161438, 1.4089943170547485, 1.391993761062622, 1.3633617162704468, 1.334923267364502, 1.3221286535263062, 1.3076155185699463, 1.3035755157470703, 1.264678716659546, 1.272720217704773, 1.2258371114730835, 1.2259876728057861, 1.211549997329712, 1.2006053924560547, 1.1895841360092163, 1.1727643013000488, 1.1517131328582764, 1.1526625156402588, 1.1395915746688843, 1.1331032514572144, 1.1240646839141846, 1.1187350749969482, 1.1205129623413086, 1.1092389822006226, 1.0974582433700562, 1.0973185300827026, 1.0837184190750122, 1.0680934190750122, 1.0802397727966309, 1.0697638988494873, 1.048680305480957, 1.0670084953308105, 1.033080816268921, 1.0604299306869507, 1.038942575454712, 1.0487408638000488, 1.038375973701477, 1.0313246250152588, 1.0370582342147827, 1.0375925302505493, 1.0331248044967651, 1.045378565788269, 1.0298627614974976, 1.0360994338989258, 1.0370402336120605, 1.0177594423294067, 0.9867298007011414, 0.9650087952613831, 0.9448838829994202, 0.9065500497817993, 0.8982852101325989, 0.8748608231544495, 0.8458082675933838, 0.8529600501060486, 0.814591109752655, 0.8033915758132935, 0.7969520092010498, 0.7726539373397827, 0.7594478130340576, 0.7448033690452576, 0.7257240414619446, 0.730053186416626, 0.7001824378967285, 0.7035374045372009, 0.6870263814926147, 0.6724445819854736, 0.65777188539505, 0.6770739555358887, 0.6694899797439575, 0.6456394195556641, 0.643139660358429, 0.6282923817634583, 0.6249302625656128, 0.6164603233337402, 0.6110894680023193, 0.6111510396003723, 0.5670879483222961, 0.5883288979530334, 0.5861023664474487, 0.5936374664306641, 0.5643364191055298, 0.5764661431312561, 0.5781932473182678, 0.5689549446105957, 0.5502772927284241, 0.5585757493972778, 0.5580258369445801, 0.5467971563339233, 0.550846517086029, 0.5512045621871948, 0.547568142414093, 0.5344576835632324, 0.5541729927062988, 0.5466093420982361, 0.534085750579834, 0.5320584774017334, 0.5373899340629578, 0.5550510883331299, 0.5408812761306763, 0.530315101146698, 0.5164999961853027, 0.5321919918060303, 0.5256410241127014, 0.5247144103050232, 0.5292260646820068, 0.5356590151786804, 0.5243615508079529, 0.5458769202232361, 0.5358967185020447, 0.5142685770988464, 0.5417536497116089, 0.518595278263092, 0.5461668372154236, 0.5307926535606384, 0.5502712726593018, 0.545039176940918, 0.5467597842216492, 0.5492511987686157, 0.5448362827301025, 0.5326036214828491, 0.5465113520622253, 0.5451874732971191, 0.5662797093391418, 0.561974823474884, 0.5619781017303467, 0.5623368620872498, 0.571641206741333, 0.5793867707252502, 0.5697425007820129, 0.596217155456543, 0.6022447347640991, 0.5895318984985352, 0.6234182715415955, 0.61127769947052, 0.6278355717658997, 0.6230068206787109, 0.6306148171424866, 0.6269865036010742, 0.6521004438400269, 0.6598366498947144, 0.660193145275116, 0.6644258499145508, 0.6805678606033325, 0.6818497180938721, 0.6938413977622986, 0.7134752869606018, 0.7160611748695374, 0.7258036136627197, 0.7586899399757385, 0.7595486640930176, 0.7668814659118652, 0.7919942736625671, 0.7906298637390137, 0.8233011960983276, 0.8269335031509399, 0.8558816909790039, 0.88390052318573, 0.9042509198188782, 0.9165852665901184, 0.9405953884124756, 0.9483139514923096, 1.0021321773529053, 1.0213578939437866, 1.048221468925476, 1.1062406301498413, 1.1208974123001099, 1.1719672679901123, 1.1919500827789307, 1.2501078844070435, 1.2740529775619507, 1.353517770767212, 1.3987003564834595, 1.460919737815857, 1.5243868827819824, 1.545797348022461, 1.5516456365585327, 1.542680263519287, 1.5700160264968872, 1.558284044265747, 1.5453519821166992, 1.5761808156967163, 1.5758520364761353, 1.5673749446868896, 1.5985106229782104, 1.594587802886963, 1.623400330543518, 1.6263364553451538, 1.8179128170013428, 2.1548211574554443, 2.2794876098632812, 2.290156126022339, 2.2988851070404053, 2.331804037094116, 2.341888427734375, 2.3741843700408936, 2.407653331756592, 2.4189791679382324, 2.448993444442749, 2.4999825954437256, 2.5004923343658447, 2.5560057163238525, 2.581230640411377, 2.618389129638672, 2.6401796340942383, 2.677650213241577, 2.7524490356445312, 2.7799391746520996, 2.822542905807495, 2.8384180068969727, 2.928398609161377, 2.9706790447235107, 3.038663148880005, 3.0893394947052, 1.0589908361434937, 1.0182228088378906, 0.9917804002761841, 0.9870576858520508, 0.9640711545944214, 0.966641902923584, 0.9560544490814209, 0.9683693647384644, 0.9581616520881653, 0.9628514647483826, 0.9713653922080994, 0.9684590101242065, 0.9970635175704956, 0.9925961494445801, 1.0220160484313965, 1.0599342584609985, inf, inf, inf, inf, 2.075770854949951, 1.9973713159561157, 1.9774086475372314, 1.9665249586105347, 1.9726532697677612, 1.9634958505630493, 1.9858121871948242, 2.029064416885376, 3.062191963195801, 3.0633957386016846, 3.037499189376831, 3.0752511024475098, 3.1506597995758057, inf, inf, inf, inf, inf, inf, inf, inf])
"""