{"version":3,"file":"static/js/939.c9c7f759.chunk.js","mappings":"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","sources":["components/Item.js","components/MenuCard.js","routes/MonitoringDashboard.js"],"sourcesContent":["import { styled } from \"@mui/material/styles\";\nimport Paper from \"@mui/material/Paper\";\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: theme.palette.text.secondary,\n}));\n\nexport default Item;\n","import React, { useState } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActionArea from \"@mui/material/CardActionArea\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\n\nconst MenuCard = (props) => {\n  const [clicked, setClicked] = useState(false);\n\n  const handleClick = () => {\n    setClicked(!clicked);\n  };\n\n  return (\n    <div onClick={props.onClick ? (e) => props.onClick(e, props.label) : null}>\n      <Card\n        onClick={handleClick}\n        sx={{\n          width: \"260px\",\n          height: \"260px\",\n          backgroundColor: props.grayedOut\n            ? \"lightgray\"\n            : !props.changeColorOnClick\n            ? null\n            : !clicked\n            ? null\n            : \"lightblue\",\n        }}\n      >\n        <CardActionArea>\n          <CardContent>\n            {props.image}\n            <Typography\n              gutterBottom\n              variant=\"h5\"\n              component=\"div\"\n              sx={{ mt: 4 }}\n            >\n              {props.label}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {props.info}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </div>\n  );\n};\n\nexport default MenuCard;\n","import React, { useState, useEffect } from \"react\";\n// import CircularProgress from \"@mui/material/CircularProgress\";\nimport Stack from \"@mui/material/Stack\";\nimport Iframe from \"react-iframe\";\nimport Box from \"@mui/material/Box\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport Drawer from \"@mui/material/Drawer\";\nimport Divider from \"@mui/material/Divider\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ReplayIcon from \"@mui/icons-material/Replay\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport { Route, Routes, Navigate, useNavigate } from \"react-router-dom\";\nimport { MdAutoGraph } from 'react-icons/md';\nimport { BiDna } from 'react-icons/bi';\nimport { FiZap } from 'react-icons/fi';\nimport { GrRobot } from 'react-icons/gr';\nimport { FaRegMap } from 'react-icons/fa';\nimport { GiBrainDump } from 'react-icons/gi';\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport ListItemButton from '@mui/material/ListItemButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport CommentIcon from '@mui/icons-material/Comment';\nimport FormHelperText from \"@mui/material/FormHelperText\";\n\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Switch from '@mui/material/Switch';\nimport Menu from '@mui/material/Menu';\nimport FeagiAPI from \"../services/FeagiAPI\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport Item from \"../components/Item\";\nimport MenuCard from \"../components/MenuCard\";\nimport {Img} from \"react-image\";\nimport map2 from \"../assets/map2.png\"\nimport {Image} from \"@mui/icons-material\";\n\n\n\nconst MonitoringDashboard = (props) => {\n  const [frameHeight, setFrameHeight] = useState(\"\");\n  const [godotFrameLoaded, setGodotFrameLoaded] = useState(false);\n  const [gazeboFrameLoaded, setGazeboFrameLoaded] = useState(false);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    const clientHeight = document.documentElement.scrollHeight;\n    setTimeout(() => {\n      setFrameHeight(clientHeight + \"px\");\n    }, 100);\n\n    // if (!window.sessionStorage.getItem(\"visited\")) {\n    //   setTimeout(() => {\n    //     setGodotFrameLoaded(true);\n    //   }, 10000);\n    // } else {\n    //   setGodotFrameLoaded(true);\n    // }\n    // window.sessionStorage.setItem(\"visited\", true);\n  }, []);\n\n  const scrollHeightScaled =\n    Math.round(document.documentElement.scrollHeight / 1.3) + \"px\";\n\n  const handleGazeboLoad = () => {\n    setGazeboFrameLoaded(true);\n  };\n\n  const handleMenuClick = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  const handleGenomeReload = () => {\n    FeagiAPI.resetGenome({\n    });\n    navigate(\"/genome/mode\");\n  };\n\n  const handleActicityMonitor = () => {\n    window.open(\"http://localhost:6082/d/Se3OI7f7k/feagi-brain-activity-analyzer?orgId=1&refresh=1s\", \"_blank\", \"noopener,noreferrer\");\n  };\n\n\n  const defaultShocks = {};\n    Object.keys(props.defaultShockOptions).forEach((key) => {\n      // defaultShocks[props.defaultCorticalGenes[key][0]] =\n      //   props.defaultCorticalGenes[key][1];\n    });\n\n\n  const [checked, setChecked] = React.useState(['none']);\n\n  const handleToggle = (value) => () => {\n\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n      FeagiAPI.postShockRobot({\n        shock: [\n          value\n        ]\n       });\n\n    } else {\n      newChecked.splice(currentIndex, 1);\n      FeagiAPI.postShockRobot({\n        shock: [\n        ]\n      });\n    }\n    setChecked(newChecked);\n\n  };\n\n\n  const drawerList = () => (\n    <Box\n      sx={{ width: \"400px\" }}\n      role=\"presentation\"\n      onClick={() => setDrawerOpen(false)}\n      onKeyDown={() => setDrawerOpen(false)}\n    >\n      <List>\n        {/* <ListItem button>\n          <ListItemIcon>\n            <AccessAlarmIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Change Burst Frequency\" />\n        </ListItem>\n        <Divider />\n        <ListItem button>\n          <ListItemIcon>\n            <CameraAltIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Take Connectome Snapshot\" />\n        </ListItem>\n        <Divider /> */}\n        <ListItem button onClick={handleGenomeReload}>\n          <ListItemIcon>\n            <ReplayIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Reload Genome\" />\n        </ListItem>\n        <Divider />\n      </List>\n    </Box>\n  );\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [robotSelectorDialogOpen, setRobotSelectorDialogOpen] = useState(false);\n  const [environmentSelectorDialogOpen, setEnvironmentSelectorDialogOpen] = useState(false);\n\n\n  const handleRobotSelectorDialogOpen = () => {\n    setRobotSelectorDialogOpen(true);\n  };\n\n  const handleRobotSelectorDialogClose = () => {\n    setRobotSelectorDialogOpen(false);\n  };\n\n  const handleEnvironmentSelectorDialogOpen = () => {\n    setEnvironmentSelectorDialogOpen(true);\n  };\n\n  const handleEnvironmentSelectorDialogClose = () => {\n    setEnvironmentSelectorDialogOpen(false);\n  };\n\n  const showRobotSelectorDialog = () => {\n    return (\n      <>\n        <Dialog open={robotSelectorDialogOpen} onClose={handleRobotSelectorDialogClose}\n                fullWidth\n                maxWidth=\"md\"\n\n        >\n          <DialogTitle>Select a Robot</DialogTitle>\n          {/*<DialogContent>*/}\n          <Stack\n            direction=\"row\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            spacing={2}\n            sx={{ m: 2 }}\n          >\n            <Item>\n              <label htmlFor=\"robot-card\">\n                <MenuCard\n                  image={<img src={require('../assets/smart_car.png')} width=\"225\" height=\"225\" />}\n                  onClick={() => {handleRobotSelection('\"smart_car.sdf\"', '\"/robots/smart_car/\"'); handleRobotSelectorDialogClose()}}\n                  changeColorOnClick={false}\n                />\n              </label>\n            </Item>\n            <Item>\n              <label htmlFor=\"robot-card\">\n                <MenuCard\n                  image={<img src={require('../assets/stick-bot.png')} width=\"225\" height=\"225\" />}\n                  onClick={() => {handleRobotSelection('\"stick-bot.sdf\"', '\"/robots/stick-bot/\"'); handleRobotSelectorDialogClose()}}\n                  changeColorOnClick={false}\n                />\n              </label>\n            </Item>\n            <Item>\n              <label htmlFor=\"robot-card\">\n                <MenuCard\n                  image={<img src={require('../assets/drone.png')} width=\"225\" height=\"225\" />}\n                  onClick={() => {handleRobotSelection('\"drone.sdf\"', '\"/robots/drone/\"'); handleRobotSelectorDialogClose()}}\n                  changeColorOnClick={false}\n                />\n              </label>\n            </Item>\n          </Stack>\n          {/*</DialogContent>*/}\n        </Dialog>\n      </>\n    );\n  }\n\n  const handleMapSelection = (type) => {\n      FeagiAPI.postRobotModel({\n        gazebo_floor_img_file: JSON.parse(type),\n        gazebo_floor_img_file_path: JSON.parse('\"./src/evo/defaults/maps/\"')\n       });\n  };\n\n  const handleRobotSelection = (type, path) => {\n      FeagiAPI.postRobotModel({\n        robot_sdf_file_name: JSON.parse(type),\n        robot_sdf_file_name_path: JSON.parse(path)\n       });\n  };\n\n\n  const showEnvironmentSelectorDialog = () => {\n    return (\n      <>\n        <Dialog open={environmentSelectorDialogOpen} onClose={handleEnvironmentSelectorDialogClose}\n                fullWidth\n                maxWidth=\"md\"\n\n        >\n          <DialogTitle>Select an Environment</DialogTitle>\n          {/*<DialogContent>*/}\n            <Stack\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              spacing={2}\n              sx={{ m: 2 }}\n            >\n              <Item>\n                <label htmlFor=\"map-card\">\n                  <MenuCard\n                    image={<img src={require('../assets/map1.png')} width=\"225\" height=\"225\" />}\n                    // label=\"Golf Course\"\n                    onClick={() => {handleMapSelection('\"map1.png\"'); handleEnvironmentSelectorDialogClose()}}\n                    changeColorOnClick={false}\n                  />\n                </label>\n              </Item>\n              <Item>\n                <label htmlFor=\"map-card\">\n                  <MenuCard\n                    image={<img src={require('../assets/map2.png')} width=\"225\" height=\"225\" />}\n                    // label=\"Chess Board\"\n                    onClick={() => {handleMapSelection('\"map2.png\"'); handleEnvironmentSelectorDialogClose()}}\n                    changeColorOnClick={false}\n                  />\n                </label>\n              </Item>\n              <Item>\n                <label htmlFor=\"map-card\">\n                  <MenuCard\n\n                    image={<img src={require('../assets/map3.png')} width=\"225\" height=\"225\" />}\n                    // label=\"Race Track\"\n                    onClick={() => {handleMapSelection('\"map3.png\"'); handleEnvironmentSelectorDialogClose()}}\n                    changeColorOnClick={false}\n                  />\n                </label>\n              </Item>\n            </Stack>\n          {/*</DialogContent>*/}\n        </Dialog>\n      </>\n    );\n  };\n\n\n  return (\n    <>\n    <Stack sx={{ flexGrow: 1 }}>\n      <AppBar\n          position=\"static\"\n          color=\"transparent\"\n          sx={{ mt: 1, mb: 0, ml: 1, mr: 1 }}\n      >\n          <Toolbar>\n            <Tooltip title=\"Reload Genome\" placement=\"top\">\n            <IconButton\n              color=\"inherit\"\n              onClick={handleGenomeReload}\n              // edge=\"start\"\n            >\n              <BiDna />\n            </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Launch Brain Activity Monitor\" placement=\"top\">\n                <IconButton\n                  color=\"inherit\"\n                  onClick={handleActicityMonitor}\n                  // edge=\"start\"\n                >\n                  <MdAutoGraph />\n                </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Environment Selector\" placement=\"top\">\n                <IconButton\n                  color=\"inherit\"\n                  onClick={handleEnvironmentSelectorDialogOpen}\n                  // edge=\"start\"\n                >\n                  <FaRegMap />\n                </IconButton>\n            </Tooltip>\n\n            <Tooltip title=\"Robot Selector\" placement=\"top\">\n                <IconButton\n                  color=\"inherit\"\n                  onClick={handleRobotSelectorDialogOpen}\n                  // edge=\"start\"\n                >\n                  <GrRobot />\n                </IconButton>\n            </Tooltip>\n\n\n            <Tooltip title=\"Shock Admin\" placement=\"top\">\n              <div>\n                <IconButton\n                  id=\"basic-button\"\n                  aria-controls={open ? 'basic-menu' : undefined}\n                  aria-haspopup=\"true\"\n                  aria-expanded={open ? 'true' : undefined}\n                  onClick={handleClick}\n                >\n                   <FiZap />\n                  {/*Shock Admin*/}\n                </IconButton>\n                <Menu\n                  id=\"basic-menu\"\n                  anchorEl={anchorEl}\n                  open={open}\n                  onClose={handleClose}\n                  MenuListProps={{\n                    'aria-labelledby': 'basic-button',\n                  }}\n                >\n                  <List\n                    sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\n                    subheader={<ListSubheader>Shock Options</ListSubheader>}\n                    >\n                    <ListItem>\n                      <ListItemText id=\"switch-list-label-shock_scenario_1\" primary=\"Dark surface shock\" />\n                      <Switch\n                        edge=\"end\"\n                        onChange={handleToggle('shock_scenario_1')}\n                        checked={checked.indexOf('shock_scenario_1') !== -1}\n                        inputProps={{\n                          'aria-labelledby': 'switch-list-label-shock_scenario_1',\n                        }}\n                      />\n                    </ListItem>\n                    <ListItem>\n\n                      <ListItemText id=\"switch-list-label-shock_scenario_2\" primary=\"Bright surface shock\" />\n                      <Switch\n                        edge=\"end\"\n                        onChange={handleToggle('shock_scenario_2')}\n                        checked={checked.indexOf('shock_scenario_2') !== -1}\n                        inputProps={{\n                          'aria-labelledby': 'switch-list-label-shock_scenario_2',\n                        }}\n                      />\n                    </ListItem>\n                  </List>\n                </Menu>\n              </div>\n            </Tooltip>\n\n\n            {/*<Tooltip title=\"Preserve Brain State (Coming Soon..)\">*/}\n            {/*    <IconButton*/}\n            {/*      color=\"inherit\"*/}\n            {/*      // onClick={handleActicityMonitor}*/}\n            {/*      // edge=\"start\"*/}\n            {/*    >*/}\n            {/*      <GiBrainDump />*/}\n            {/*    </IconButton>*/}\n            {/*</Tooltip>*/}\n\n          </Toolbar>\n        </AppBar>\n    </Stack>\n\n    <Stack\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      spacing={1}\n      sx={{ mt: 1, mb: 2, ml: 1, mr: 1 }}\n    >\n      {/* {godotFrameLoaded ? ( */}\n\n      <Drawer\n        anchor=\"left\"\n        variant=\"temporary\"\n        elevation={3}\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n      >\n        <Box textAlign=\"center\" role=\"presentation\">\n          <Typography variant=\"h5\" component=\"div\" sx={{ m: 2 }}>\n            Configuration\n          </Typography>\n          <Divider />\n        </Box>\n        {drawerList()}\n      </Drawer>\n      <iframe\n        id=\"godotFrame\"\n        src=\"http://localhost:6081\"\n        width=\"50%\"\n        height={scrollHeightScaled}\n      />\n      {/* ) : (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: scrollHeightScaled,\n            width: \"50%\",\n          }}\n        >\n          <CircularProgress size=\"150px\" />\n        </div>\n      )} */}\n      <Iframe\n        className=\"iframe\"\n        id=\"gazeboFrame\"\n        url=\"http://localhost:6080\"\n        width=\"50%\"\n        height={scrollHeightScaled}\n        onLoad={handleGazeboLoad}\n      />\n    </Stack>\n    {showRobotSelectorDialog()}\n    {showEnvironmentSelectorDialog()}\n    </>\n\n  );\n};\n\nexport default MonitoringDashboard;\n"],"names":["Item","styled","Paper","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","textAlign","color","text","secondary","props","useState","clicked","setClicked","onClick","e","label","sx","width","height","grayedOut","changeColorOnClick","image","gutterBottom","variant","component","mt","info","setFrameHeight","setGazeboFrameLoaded","drawerOpen","setDrawerOpen","navigate","useNavigate","useEffect","clientHeight","document","documentElement","scrollHeight","setTimeout","scrollHeightScaled","Math","round","handleGenomeReload","FeagiAPI","Object","keys","defaultShockOptions","forEach","key","React","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","shock","splice","anchorEl","setAnchorEl","open","Boolean","robotSelectorDialogOpen","setRobotSelectorDialogOpen","environmentSelectorDialogOpen","setEnvironmentSelectorDialogOpen","handleRobotSelectorDialogClose","handleEnvironmentSelectorDialogClose","handleMapSelection","type","gazebo_floor_img_file","JSON","parse","gazebo_floor_img_file_path","handleRobotSelection","path","robot_sdf_file_name","robot_sdf_file_name_path","flexGrow","position","mb","ml","mr","title","placement","window","id","undefined","event","currentTarget","onClose","MenuListProps","maxWidth","bgcolor","subheader","primary","edge","onChange","inputProps","direction","alignItems","justifyContent","anchor","elevation","role","m","onKeyDown","button","src","className","url","onLoad","fullWidth","htmlFor","require"],"sourceRoot":""}