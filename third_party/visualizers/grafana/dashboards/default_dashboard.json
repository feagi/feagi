{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      },
      {
        "datasource": "InfluxDB_v2_Flux",
        "enable": false,
        "iconColor": "red",
        "mappings": {
          "id": {
            "source": "field",
            "value": "Neuron m__inf"
          },
          "tags": {
            "source": "field",
            "value": "Neuron m__inf"
          },
          "text": {
            "source": "field",
            "value": "Neuron m__inf"
          },
          "time": {
            "source": "field",
            "value": "Time"
          },
          "timeEnd": {
            "source": "field",
            "value": "Time"
          },
          "title": {
            "source": "field",
            "value": "Neuron m__inf"
          }
        },
        "name": "Shocks",
        "target": {
          "limit": 10,
          "query": "from(bucket: \"data\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> drop(columns:[\"connectome\"])\n  |> filter(fn: (r) => r[\"_measurement\"] == \"neuron\")\n  |> filter(fn: (r) => r[\"_field\"] == \"membrane_potential\" and r[\"dst_cortical_area\"] == \"i__shok\" )\n  |> drop(columns:[\"dst_voxel_x\", \"dst_voxel_y\", \"dst_voxel_z\", \"dst_neuron_id\", \"dst_voxel_id\"])\n  |> set(key: \"_field\", value: \"Neuron\")\n",
          "refId": "Anno",
          "type": "tags"
        }
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": null,
  "graphTooltip": 1,
  "id": 3,
  "iteration": 1654958850174,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "targets": [
        {
          "query": "from(bucket: \"data\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> drop(columns:[\"connectome\"])\n  |> filter(fn: (r) => r[\"_measurement\"] == \"neuron\")\n  |> filter(fn: (r) => r[\"_field\"] == \"membrane_potential\" and r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/ )\n  |> filter(fn: (r) => r[\"dst_voxel_x\"] =~ /^${dst_vox_x:regex}$/ and r[\"dst_voxel_y\"] =~ /^${dst_vox_y:regex}$/ and r[\"dst_voxel_z\"] =~ /^${dst_vox_z:regex}$/ )\n  |> drop(columns:[\"dst_voxel_x\", \"dst_voxel_y\", \"dst_voxel_z\"])\n  |> set(key: \"_field\", value: \"Neuron\")\n",
          "refId": "A"
        }
      ],
      "title": "Membrane Potentials",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "cortical_area",
            "renamePattern": "area"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+_\\d+_)(\\w+)(_N)",
            "renamePattern": "$2"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "voxel_id",
            "renamePattern": "vox"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "Neuron ",
            "renamePattern": ""
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 4,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "always",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "normal"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 6,
      "links": [],
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.2.5",
      "targets": [
        {
          "alias": "Membrane Potentials",
          "groupBy": [],
          "measurement": "membranePotential",
          "orderByTime": "ASC",
          "policy": "autogen",
          "query": "from(bucket: \"data\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"synapse\")\n  |> filter(fn: (r) => r[\"_field\"] == \"postSynapticCurrent\" and (r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/ or r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/))\n  |> filter(fn: (r) => r[\"src_neuron_id\"] =~ /^${src_neuron_id:regex}$/ and r[\"dst_neuron_id\"] =~ /^${dst_neuron_id:regex}$/)\n  |> filter(fn: (r) => r[\"dst_voxel_x\"] =~ /^${dst_vox_x:regex}$/ and r[\"dst_voxel_y\"] =~ /^${dst_vox_y:regex}$/ and r[\"dst_voxel_z\"] =~ /^${dst_vox_z:regex}$/ )\n  |> drop(columns:[\"connectome\", \"src_voxel_x\", \"src_voxel_y\", \"src_voxel_z\", \"dst_voxel_x\", \"dst_voxel_y\", \"dst_voxel_z\"])\n  |> yield(name: \"mean\")",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "membrane_potential"
                ],
                "type": "field"
              }
            ]
          ],
          "tags": []
        }
      ],
      "timeShift": null,
      "title": "Post Synaptic Currents",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "cortical_area",
            "renamePattern": "area"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+_\\d+_)(\\w+)(_N)",
            "renamePattern": "$2"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "voxel_id",
            "renamePattern": "vox"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "postSynapticCurrent ",
            "renamePattern": ""
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+_\\d+_)(\\w+)(_N)",
            "renamePattern": "$2"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "voxel_id",
            "renamePattern": "vox"
          }
        }
      ],
      "type": "timeseries"
    },
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": true,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 20
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        }
      },
      "pluginVersion": "8.2.5",
      "targets": [
        {
          "query": "from(bucket: \"data\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> drop(columns:[\"connectome\"])\n  |> filter(fn: (r) => r[\"_measurement\"] == \"neuron\")\n  |> filter(fn: (r) => r[\"dst_voxel_x\"] =~ /^${dst_vox_x:regex}$/ and r[\"dst_voxel_y\"] =~ /^${dst_vox_y:regex}$/ and r[\"dst_voxel_z\"] =~ /^${dst_vox_z:regex}$/ )\n  |> drop(columns:[\"dst_voxel_x\", \"dst_voxel_y\", \"dst_voxel_z\", \"dst_voxel_id\", \"dst_neuron_id\"])\n  |> set(key: \"_field\", value: \"Neuron\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"average\")\n",
          "refId": "A"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Average Neuron Fire Count",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": "cortical_area",
            "renamePattern": "area"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+_\\d+_)(\\w+)(_N)",
            "renamePattern": "$2"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "voxel_id",
            "renamePattern": "vox"
          }
        },
        {
          "id": "renameByRegex",
          "options": {
            "regex": "Neuron ",
            "renamePattern": ""
          }
        }
      ],
      "type": "timeseries"
    }
  ],
  "refresh": "1s",
  "schemaVersion": 32,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_cortical_area\",\n    predicate: (r) => r[\"_measurement\"] == \"neuron\"  or r[\"_measurement\"] == \"synapse\",\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Destination Cortical Area",
        "multi": true,
        "name": "dst_cortical_area",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_cortical_area\",\n    predicate: (r) => r[\"_measurement\"] == \"neuron\"  or r[\"_measurement\"] == \"synapse\",\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_x\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Dst Vox X",
        "multi": true,
        "name": "dst_vox_x",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_x\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_y\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Dst Vox Y",
        "multi": true,
        "name": "dst_vox_y",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_y\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_z\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Dst Vox Z",
        "multi": true,
        "name": "dst_vox_z",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_voxel_z\",\n    predicate: (r) =>  r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_cortical_area\",\n    predicate: (r) => r[\"_measurement\"] == \"neuron\" or r[\"_measurement\"] == \"synapse\",\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Source Cortical Area",
        "multi": true,
        "name": "src_cortical_area",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_cortical_area\",\n    predicate: (r) => r[\"_measurement\"] == \"neuron\" or r[\"_measurement\"] == \"synapse\",\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_x\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Src Vox X",
        "multi": true,
        "name": "src_vox_x",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_x\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_y\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Src Vox Y",
        "multi": true,
        "name": "src_vox_y",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_y\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_z\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Src Vox Z",
        "multi": true,
        "name": "src_vox_z",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_voxel_z\",\n    predicate: (r) =>  r[\"src_cortical_area\"] =~ /^${src_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_neuron_id\",\n    predicate: (r) => r[\"_measurement\"] == \"synapse\" and r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Destination Neuron ID",
        "multi": true,
        "name": "dst_neuron_id",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"dst_neuron_id\",\n    predicate: (r) => r[\"_measurement\"] == \"synapse\" and r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": null,
        "definition": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_neuron_id\",\n    predicate: (r) => r[\"_measurement\"] == \"synapse\" and r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Source Neuron ID",
        "multi": true,
        "name": "src_neuron_id",
        "options": [],
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"src_neuron_id\",\n    predicate: (r) => r[\"_measurement\"] == \"synapse\" and r[\"dst_cortical_area\"] =~ /^${dst_cortical_area:regex}$/,\n    start: -1d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-2m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "1s",
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "FEAGI Brain Activity Analyzer",
  "uid": "Se3OI7f7k",
  "version": 76
}