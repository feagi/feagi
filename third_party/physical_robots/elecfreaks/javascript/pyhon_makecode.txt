Hex with service:

def on_bluetooth_connected():
    basic.show_string("2")
bluetooth.on_bluetooth_connected(on_bluetooth_connected)

def on_bluetooth_disconnected():
    basic.show_string("0")
bluetooth.on_bluetooth_disconnected(on_bluetooth_disconnected)

def on_uart_data_received():
    global feagi_string, value1, value2, powerR, powerL, directionR, directionL
    feagi_string = bluetooth.uart_read_until(serial.delimiters(Delimiters.HASH))
    value1 = int(feagi_string[0])
    value2 = int(feagi_string[3])
    if len(feagi_string) == 6:
        basic.show_string("S")
        powerR = int(feagi_string.slice(1, 3))
        powerL = int(feagi_string.slice(4, 6))
    else:
        basic.show_number(3)
        powerR = 0
        powerL = 0
    if value1 <= 1:
        directionR = value1
    else:
        directionL = value1
    if value2 <= 3 and value2 > 1:
        directionL = value2
    else:
        directionR = value2
    if directionR == 1:
        powerR = powerR * -1
    if directionL == 3:
        powerL = powerL * -1
    cuteBot.motors(int(powerL), int(powerR))
bluetooth.on_uart_data_received(serial.delimiters(Delimiters.HASH), on_uart_data_received)

ultrasonic_data = 0
sound_level = ""
db_level = 0
acc_z = ""
acc_y = ""
acc_x = ""
R_flag = ""
L_flag = ""
directionL = 0
directionR = 0
powerL = 0
powerR = 0
value2 = 0
value1 = 0
direction = ""
feagi_string = ""
negative_data = ""
sound = ""
timer = 0
bluetooth.start_uart_service()
basic.show_string("1")
keyboard.start_keyboard_service() # This is what all new computers can connect microbit. This one doesnt use the standard bluetooth

def on_forever():
    global L_flag, R_flag, acc_x, acc_y, acc_z, db_level, sound_level, ultrasonic_data
    if cuteBot.tracking(cuteBot.TrackingState.L_LINE_R_UNLINE) == True:
        L_flag = "t"
    elif cuteBot.tracking(cuteBot.TrackingState.L_LINE_R_UNLINE) == False:
        L_flag = "f"
    if cuteBot.tracking(cuteBot.TrackingState.L_UNLINE_R_LINE) == True:
        R_flag = "t"
    elif cuteBot.tracking(cuteBot.TrackingState.L_UNLINE_R_LINE) == False:
        R_flag = "f"
    if cuteBot.tracking(cuteBot.TrackingState.L_R_LINE) == True:
        R_flag = "t"
        L_flag = "t"
    acc_x = "" + str((int(input.acceleration(Dimension.X)) + 1000))
    while len(acc_x) < 4:
        acc_x = "0" + acc_x
    acc_y = "" + str((int(input.acceleration(Dimension.Y)) + 1000))
    while len(acc_y) < 4:
        acc_y = "0" + acc_y
    acc_z = "" + str((int(input.acceleration(Dimension.Z)) + 1000))
    while len(acc_z) < 4:
        acc_z = "0" + acc_z
    db_level = input.sound_level()
    if db_level > 100:
        sound_level = "99"
    elif db_level < 10:
        sound_level = "0" + ("" + str(db_level))
    else:
        sound_level = "" + str(db_level)
    ultrasonic_data = cuteBot.ultrasonic(cuteBot.SonarUnit.CENTIMETERS)
    if ultrasonic_data > 99:
        ultrasonic_data = 99
    elif ultrasonic_data < 0:
        ultrasonic_data = 0
    bluetooth.uart_write_string("" + L_flag + R_flag + acc_x + acc_y + acc_z + ("" + str(ultrasonic_data)) + sound_level)
basic.forever(on_forever)

Microbit with UART HEX:

def on_bluetooth_connected():
    basic.show_string("2")
bluetooth.on_bluetooth_connected(on_bluetooth_connected)

def on_bluetooth_disconnected():
    basic.show_string("0")
bluetooth.on_bluetooth_disconnected(on_bluetooth_disconnected)

def on_uart_data_received():
    global feagi_string, value1, value2, powerR, powerL, directionR, directionL
    feagi_string = bluetooth.uart_read_until(serial.delimiters(Delimiters.HASH))
    value1 = int(feagi_string[0])
    value2 = int(feagi_string[3])
    if len(feagi_string) == 6:
        basic.show_string("S")
        powerR = int(feagi_string.slice(1, 3))
        powerL = int(feagi_string.slice(4, 6))
    else:
        basic.show_number(3)
        powerR = 0
        powerL = 0
    if value1 <= 1:
        directionR = value1
    else:
        directionL = value1
    if value2 <= 3 and value2 > 1:
        directionL = value2
    else:
        directionR = value2
    if directionR == 1:
        powerR = powerR * -1
    if directionL == 3:
        powerL = powerL * -1
    cuteBot.motors(int(powerL), int(powerR))
bluetooth.on_uart_data_received(serial.delimiters(Delimiters.HASH), on_uart_data_received)

ultrasonic_data = 0
sound_level = ""
db_level = 0
acc_z = ""
acc_y = ""
acc_x = ""
R_flag = ""
L_flag = ""
directionL = 0
directionR = 0
powerL = 0
powerR = 0
value2 = 0
value1 = 0
direction = ""
feagi_string = ""
negative_data = ""
sound = ""
timer = 0
bluetooth.start_uart_service()
basic.show_string("1")

def on_forever():
    global L_flag, R_flag, acc_x, acc_y, acc_z, db_level, sound_level, ultrasonic_data
    if cuteBot.tracking(cuteBot.TrackingState.L_LINE_R_UNLINE) == True:
        L_flag = "t"
    elif cuteBot.tracking(cuteBot.TrackingState.L_LINE_R_UNLINE) == False:
        L_flag = "f"
    if cuteBot.tracking(cuteBot.TrackingState.L_UNLINE_R_LINE) == True:
        R_flag = "t"
    elif cuteBot.tracking(cuteBot.TrackingState.L_UNLINE_R_LINE) == False:
        R_flag = "f"
    if cuteBot.tracking(cuteBot.TrackingState.L_R_LINE) == True:
        R_flag = "t"
        L_flag = "t"
    acc_x = "" + str((int(input.acceleration(Dimension.X)) + 1000))
    while len(acc_x) < 4:
        acc_x = "0" + acc_x
    acc_y = "" + str((int(input.acceleration(Dimension.Y)) + 1000))
    while len(acc_y) < 4:
        acc_y = "0" + acc_y
    acc_z = "" + str((int(input.acceleration(Dimension.Z)) + 1000))
    while len(acc_z) < 4:
        acc_z = "0" + acc_z
    db_level = input.sound_level()
    if db_level > 100:
        sound_level = "99"
    elif db_level < 10:
        sound_level = "0" + ("" + str(db_level))
    else:
        sound_level = "" + str(db_level)
    ultrasonic_data = cuteBot.ultrasonic(cuteBot.SonarUnit.CENTIMETERS)
    if ultrasonic_data > 99:
        ultrasonic_data = 99
    elif ultrasonic_data < 0:
        ultrasonic_data = 0
    bluetooth.uart_write_string("" + L_flag + R_flag + acc_x + acc_y + acc_z + ("" + str(ultrasonic_data)) + sound_level)
basic.forever(on_forever)
